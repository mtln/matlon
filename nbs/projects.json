[
    {
        "title": "Patient",
        "categories": ["early projects"],
        "year_start": 1991,
        "year_end": 1994,
        "quote": "Early DOS software for patient management",
        "description": "My first software that was used productively was called 'Patient'. I wrote it as a teenager in Turbo Pascal for my mother, who, in addition to being a housewife, also worked part-time as a self-employed physiotherapist. The DOS application was multicolored and could be operated with a mouse. We had an Intel 80386 DX 20 MHz computer with a 1 GB hard drive and a simple dot-matrix printer. With my patient management software, one could not only schedule appointments and do the accounting, but also directly fill out the yellow forms that had to be submitted to the disability insurance (IV) for billing. At the time, my mother was probably the only physiotherapist who sent forms to the insurance not handwritten but neatly filled out by a printer ðŸ˜€. \n\n ![Patient menu screenshot](patient1.jpg) \n\nThe completely exaggerated title 'Physikalisch-Therapeutisches Institut Ruth KrÃ¤mer & Co.' was, of course, meant as a family insider joke.  \n\n ![Patient detail screenshot](patient2.jpg)"

    },
    {
        "title": "Ohr",
        "categories": ["early projects", "music"],
        "year_start": 1992,
        "year_end": 1994,
        "quote": "Ear trainer for musicians",
        "description": "Music was always my great love. After high school, I went to the Jazz School in Lucerne, but later decided to pursue a degree in computer science at ETH Zurich. Ear training is essential in music, so I programmed 'Ohr', a software for ear training, which allowed users to practice recognizing intervals, chords and their inversions, scales, and so on. To make it possible to practice on the go (laptops didn't exist yet), the software included a feature for creating exercises that could be recorded directly onto cassette. In parallel, the solutions were printed out so that one could practice with a Walkman and a sheet of paper wherever they wanted. The Sound Blaster card was the first to support speech synthesis and could be used with a text-to-speech command-line tool `c:\\sb\\sbtalker\\say.exe`. So, to keep track during practice, every 10 exercises were announced.  \n\n ![Soundblaster](ohr1.jpg)"

    },
    {
        "title": "Teltax",
        "categories": ["early projects"],
        "year_start": 1995,
        "year_end": 1999,
        "quote": "Dial-In modem costs calculator and splitter",
        "description": "To access the internet back then, you had to dial in via a modem over the phone line. There was a basic charge for establishing the connection and a per-minute fee with three different time-based pricing levels. Internet costs could quickly become very high, and if you lived in a shared apartment or worked remotely for an employer, you needed to know for each 'internet session' when it happened, how long it lasted, and who would be responsible for paying at the end of the month.\n\nThat's exactly why I wrote Teltax. It was activated each time a modem connection ended, allowing you to specify whose account the costs should be charged to. The details were read from the technical log of the Win95 modem driver (e.g., `c:\\win95\\ModemLog_Zeus 336E External 33600 Fax Modem.txt`). Then, the costs were calculated based on the three different price levels and written into a log file. At the end of the billing period, a total cost per user was calculated. Additionally, the data volume was analyzed, and the cost per megabyte was calculated. Since charges were based on time rather than data volume back then, the goal was, of course, to keep the cost per megabyte as low as possible by truly using the connection and not keeping it open for too long.\n\n ![Teltax summary screenshot](teltax1.jpg)"
    },
    {
        "title": "PublicSecrets",
        "categories": ["early projects", "long-term projects"],
        "year_start": 1997,
        "year_end": 2007,
        "quote": "The _really_ social network before social networks",
        "description": ""

    },
    {
        "title": "WiiMIDIi",
        "year_start": 2007,
        "year_end": 2008,
        "categories": ["music"],
        "quote": "Using a Nintendo Wiimote for guitar motion sensing and converting accelerometer data to MIDI",
        "description": ""

    },
    {
        "title": "Gschichtefritz",
        "categories": ["long-term projects"],
        "year_start": 2009,
        "quote": "Audio stories with songs for children",
        "description": ""

    },
    {
        "title": "Gschichtefritz App",
        "categories": ["long-term projects"],
        "year_start": 2020,
        "quote": "Gschichtefritz audiobook player app for iOS and Android",
        "description": "Gschichtefritz offered MP3s from the very beginning. However, with the rise of streaming services, it became clear that customers were finding it increasingly challenging to download MP3s and transfer them to iPods, tablets, or smartphones. To address this issue, I developed a player app in 2020. The free [Gschichtefritz App](https://gschichtefritz.ch/page/app) lets you download all your stories, so you can listen to them offline whenever you want. Itâ€™s also designed to be easily operated by young children, even those who canâ€™t read yet.\n\n**Framework:** Xamarin, since 2023: Maui  \n**Programming Language:** C#  \n**Platforms:** iOS and Android\n\n ![Gschichtefritz App Screenshot](gschichtefritzapp1.jpg)",
        "related_project_titles": ["Gschichtefritz"]

    },
    {
        "title": "gschichtefritz.ch legacy",
        "categories": ["long-term projects"],
        "year_start": 2009,
        "year_end": 2023,
        "quote": "CRM, shop, CD burner automation, accounting, and more",
        "description": "",
        "related_project_titles": ["Gschichtefritz", "Gschichtefritz App"]
    },
    {
        "title": "gschichtefritz.ch current",
        "categories": ["miscellaneous"],
        "year_start": 2024,
        "quote": "Shop and App backend",
        "description": "",
        "related_project_titles": ["Gschichtefritz", "Gschichtefritz App"]
    },
    {
        "title": "VisualMix",
        "categories": ["music"],
        "year_start": 2022,
        "year_end": 2022,
        "quote": "Mix and arrangement of a song visualized",
        "description": "",
        "related_project_titles": ["Gschichtefritz"]
    },
    {
        "title": "Dino Stampf Deep Learning",
        "categories": ["AI"],
        "year_start": 2017,
        "year_end": 2017,
        "quote": "Pre-LLM AI generated pseudo-Swiss German lyrics",
        "description": "",
        "related_project_titles": ["Gschichtefritz"]
    },
    {
        "title": "Brainwaver: Pink Noise",
        "categories": ["miscellaneous"],
        "year_start": 2013,
        "year_end": 2013,
        "quote": "Nothing but binaural pink noise to get into the flow and focus",
        "description": "Back in the mid-90s, while studying at ETH, I always carried a cassette with self-generated pink noise for my Walkman (I used Cool Edit for that). Later, of course, it was an MP3. In 2013, there was an opportunity to release an EP for free on Spotify and other streaming platforms. I used this to publish my pink noise tracks online under the name 'Brainwaver', so there's no need for copying MP3s anymore.  \n\nI listen to the tracks through headphones whenever I want to focus in a noisy environment or just unwind and relax. Pink noise masks external sounds and, unlike music, doesnâ€™t distract. White noise has an evenly distributed intensity across the frequency spectrum (which can sound quite harsh). With pink noise, the intensity decreases as frequency increases; the lower frequencies are louder, while the higher ones are softer, creating a more pleasant soundâ€”similar to a waterfall.\n\nThere's a theory that the binaural modulation of noise, when listened to with headphones, can cause brain waves to synchronize with the modulation frequency, potentially inducing certain mental states (e.g., relaxation or heightened concentration). I'm not sure if that's true, but binaurally modulated noise sounds less monotonous than pure pink noiseâ€”kind of like a helicopter circling above a waterfall.\n\nListen to Brainwaver: Pink Noise on [Spotify](https://open.spotify.com/intl-de/album/6nUrFEp7Vhz6iEv1e09hnv?si=i34g5tHXQN2WE2TLHwqTsw) or [Apple Music](https://music.apple.com/us/album/pink-noise/803098796)"
    },
    {
        "title": "batGPT",
        "categories": ["AI"],
        "year_start": 2024,
        "quote": "Write assessment reports for assistive technologies using AI",
        "description": "batGPT is an AI tool for writing assessment reports for assistive technologies, using large language models (LLMs). By selecting keywords and entering short text fragments, a draft report is generated, which can then be manually completed and refined. The screenshot shows an example of such a draft\n\n ![Screenshot of batGPT: Input on the left, generated output on the right.](batgpt1.jpg)\n\nThis application was developed for [b-at Beratung assistive Technologien](https://b-at.ch) in 2024 and is being enhhanced and improved regularly, using the latest AI models and capabilities."
    },{
        "title": "docGPT",
        "categories": ["AI"],
        "year_start": 2025,
        "quote": "Write structured documents and reports with just a few clicks and keystrokes",
        "description": "There's a dedicated page for this project: [docGPT](/05_docGPT.ipynb)"
    },{
        "title": "mts",
        "categories": ["miscellaneous"],
        "year_start": 2025,
        "quote": "A tool for electronic billing in the Swiss healthcare system",
        "description": "There's a dedicated page for this project (in German): [mts](/01_mts.ipynb)"
    },{
        "title": "tl-qrbill",
        "categories": ["miscellaneous"],
        "year_start": 2025,
        "quote": "An extension for the teamleader CRM/ERP to generate Swiss QR-Bill slips",
        "description": "There's a dedicated page for this project (in German): [tl-qrbill](/02_tlqrbill.ipynb)"
    },{
        "title": "bringo",
        "categories": ["miscellaneous"],
        "year_start": 2025,
        "quote": "The perfect platform for 'self-organizing' events. Who's coming? Who's bringing what? Bringo takes care of it all.",
        "description": "Bringo is written in Python, using the Reflex framework. There's a dedicated page for this project (in German): [bringo](/03_bringo.ipynb)"
    },{
        "title": "chat-export",
        "categories": ["miscellaneous"],
        "year_start": 2024,
        "quote": "My father asked me how he could print his WhatsApp chat history with my late brother. I had to realize that this was not possible, and there was no useful free tool to archive or print a chat in a nice format. So, I wrote one.",
        "description": "[chat-export](https://chat-export.click) is an open-source tool written in Python. The website is built using an AWS Lambda function that retrieves the project's README markdown from GitHub, converts it to HTML, and returns it as a complete, properly formatted HTML page. \n\n [![YouTube](https://img.youtube.com/vi/s1dMO8pjkC8/0.jpg)](https://www.youtube.com/watch?v=s1dMO8pjkC8)"
    },{
        "title": "Anelec",
        "categories": ["early projects"],
        "year_start": 1985,
        "year_end": 1990,
        "quote": "My first company at the age of 12",
        "description": "A funny memory I found at my brother's place in 2024: A catalog from 1986, when I was 13 years old. I already had a 'company' named 'Anelec' (derived from Andri Electronics). I etched circuit boards at home in the laundry room and sold kits and electronic circuits at school. I remember that the mother of a classmate was quite shocked when I sold her son a light organ with the note '220 volts! Danger of death!' and some drawn skulls on the circuit board ðŸ˜€.\n\n ![A page from 'Anelec Catalog 1986'](Anelec.jpg)"
    },
    {
        "title": "Running Wheel Tracker",
        "categories": ["miscellaneous"],
        "year_start": 2018,
        "year_end": 2018,
        "quote": "Pet cage upgraded for the IoT era",
        "description": ""
    },{
        "title": "easypaste",
        "categories": ["miscellaneous"],
        "year_start": 2025,
        "quote": "Your ultimate clipboard sidekick for presentations, coding demos, and tutorial recordings. This lightweight, open-source tool, built in Rust, lets you load a text file with custom delimiters and then paste segments one-by-one via global hotkeysâ€”no retyping, no fumbling with copy/paste. It also shows a preview of the upcoming segment (with optional internal notes visible only in console).",
        "description": "[easypaste](https://easypaste.click) is an open-source tool written in Rust. The website is built using an AWS Lambda function that retrieves the project's README markdown from GitHub, converts it to HTML, and returns it as a complete, properly formatted HTML page."
    },{
        "title": "shuffle_spotify_playlist",
        "categories": ["music","miscellaneous"],
        "year_start": 2022,
        "year_end": 2022,
        "quote": "Create a shuffled copy of your Spotify playlist - the reliable way to avoid repeats during playback.",
        "description": "When planning a party â€” whether for friends, colleagues, or clients â€” I usually take care of the music myself. I enjoy curating playlists and selecting songs that fit the occasion and mood. For me, music is too important to rely on AI-generated or generic playlists. I want the experience to feel intentional and personal.\n\nHowever, I kept running into the same problem: after assembling a playlist of 80-120 songs, I'd notice that similar tracks or songs from the same artist often ended up grouped together. That's natural â€” it reflects the way we think while adding songs. But it doesn't make for a good listening experience.\n\nShuffle mode in Spotify seemed like a quick fix, but it caused another issue: when the playback is stopped (e.g. during a dinner or speech) and resumed later, Spotify doesn't remember which songs have already been played. As a result, some tracks repeat, while others don't get played at all.\n\nTo avoid this, I wanted a way to shuffle the playlist once and then play it in regular, sequential mode â€” ensuring all songs are played once, in a good order, without repetition. Doing this manually for large playlists is tedious and time-consuming.\n\nThat's why I wrote a small Python script in a Jupyter Notebook to automate the process. It connects to your Spotify account, takes a playlist, shuffles it once, and saves the shuffled version as a new playlist. This gives you a great base to start from â€” and you can still reorder a few songs manually if you like.\n\nYou can find it on GitHub:  \nðŸ”— [github.com/mtln/shuffle_spotify_playlist](https://github.com/mtln/shuffle_spotify_playlist/blob/main/ShuffleSpotifyPlaylist.ipynb)"
    }
    
    
]
